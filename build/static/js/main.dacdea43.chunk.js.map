{"version":3,"sources":["components/Notification.js","components/Filter.js","components/PersonForm.js","components/Person.js","components/Persons.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Notification","message","type","console","log","className","Filter","props","value","filter","onChange","handle","PersonForm","onSubmit","submit","name","hNaC","number","hNuC","Person","key","i","person","onClick","delPerson","id","Persons","pTS","map","baseUrl","getAll","axios","get","create","newObject","post","update","put","deletePerson","a","delete","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","showAll","setShowAll","errorMessage","setErrorMessage","typeError","setTypeError","useEffect","personService","then","r","data","personsToShow","toLowerCase","indexOf","event","target","preventDefault","personObject","length","found","find","window","confirm","listPersons","p","setTimeout","catch","error","JSON","stringify","concat","personId","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOAeeA,EAbM,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,KAG7B,GAFAC,QAAQC,IAAI,IAAKH,GACjBE,QAAQC,IAAI,OAAQF,GACJ,OAAZD,EACF,OAAO,KAGT,IAAMI,EAAS,kBAAcH,GAC7B,OACE,yBAAKG,UAAWA,GAAYJ,ICHnBK,EANA,SAACC,GACZ,OACI,kDAAuB,2BAAOC,MAAOD,EAAME,OAAQC,SAAUH,EAAMI,WCS5DC,EAXI,SAACL,GAChB,OACI,0BAAMM,SAAUN,EAAMO,QACtB,sCAAW,2BAAON,MAAOD,EAAMQ,KAAML,SAAUH,EAAMS,QACrD,wCAAa,2BAAOR,MAAOD,EAAMU,OAAQP,SAAUH,EAAMW,QAEzD,6BAAK,4BAAQhB,KAAK,UAAb,UCIEiB,EAVA,SAACZ,GACZ,OACI,6BACI,uBAAGa,IAAKb,EAAMc,GAAId,EAAMe,OAAOP,KAA/B,MAAwCR,EAAMe,OAAOL,OACjD,4BAAQM,QAAShB,EAAMiB,UAAWhB,MAAOD,EAAMe,OAAOG,IAAtD,aCcDC,EAjBC,SAACnB,GACb,OACI,6BACCA,EAAMoB,IAAIC,KAAI,SAACN,EAAQD,GACpB,OACI,kBAAC,EAAD,CACIC,OAAQA,EACRF,IAAKC,EACLG,UAAWjB,EAAMiB,iB,wCCV/BK,EAAU,oCAuBD,GAAEC,OArBF,WACX,OAAOC,IAAMC,IAAIH,IAoBII,OAjBV,SAAAC,GACX,OAAOH,IAAMI,KAAKN,EAASK,IAgBEE,OAblB,SAACX,EAAIS,GAChB,OAAOH,IAAMM,IAAN,UAAaR,EAAb,YAAwBJ,GAAMS,IAYAI,aATvB,uCAAG,WAAOb,GAAP,SAAAc,EAAA,wFAENR,IAAMS,OAAN,UAAgBX,EAAhB,YAA2BJ,KAFrB,gCAKbtB,QAAQC,IAAI,QAAZ,MALa,wDAAH,uDCqIHqC,EA7IH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACRC,EADQ,KACCC,EADD,OAEgBF,mBAAS,IAFzB,mBAERG,EAFQ,KAECC,EAFD,OAGoBJ,mBAAS,IAH7B,mBAGRK,EAHQ,KAGGC,EAHH,OAIoBN,mBAAS,IAJ7B,mBAIRO,EAJQ,KAIGC,EAJH,OAKgBR,oBAAS,GALzB,mBAKRS,EALQ,KAKCC,EALD,OAM0BV,mBAAS,MANnC,mBAMRW,EANQ,KAMMC,EANN,OAOoBZ,mBAAS,SAP7B,mBAORa,EAPQ,KAOGC,EAPH,KA4BhBC,qBARa,WAEXC,EACG5B,SACA6B,MAAK,SAAAC,GACJhB,EAAWgB,EAAEC,WAGF,IAEjB,IAoFMC,EAAgBX,EAClBR,EACAA,EAAQlC,QAAO,SAAAa,GAAM,OAAoE,IAAhEA,EAAOP,KAAKgD,cAAcC,QAAQf,EAAUc,kBAEzE,OACE,6BACE,yCACA,kBAAC,EAAD,CAAc9D,QAASoD,EAAcnD,KAAMqD,IAE3C,kBAAC,EAAD,CAAQ9C,OAAQwC,EAAWtC,OAnBJ,SAACsD,GAC1B9D,QAAQC,IAAI,SAAU6D,EAAMC,OAAO1D,OACnC0C,EAAae,EAAMC,OAAO1D,OACA,KAAvByD,EAAMC,OAAO1D,MACd4C,GAAW,GAEXA,GAAW,MAeX,gDACA,kBAAC,EAAD,CACEtC,OAjGY,SAACmD,GACjBA,EAAME,iBACN,IAAMC,EAAe,CACnBrD,KAAM8B,EACN5B,OAAQ8B,EACRtB,GAAIkB,EAAQA,EAAQ0B,OAAS,GAAG5C,GAAK,GAGjC6C,EAAQ3B,EAAQ4B,MAAK,SAAAjD,GAAM,OAAIA,EAAOP,OAAS8B,KACrD1C,QAAQC,IAAI,QAAQkE,GACjBA,EACEE,OAAOC,QAAP,UAAkBH,EAAMvD,KAAxB,mEAAuFuD,EAAMrD,OAA7F,6BAAwHmD,EAAanD,OAArI,OACHyC,EACGtB,OAAOkC,EAAM7C,GAAI2C,GACjBT,MAAK,SAAAC,GACJzD,QAAQC,IAAI,IAAIwD,EAAEC,MAClB,IAAMa,EAAc/B,EAAQf,KAAI,SAAA+C,GAAC,OAAIA,EAAElD,KAAO6C,EAAM7C,GAAf,eAAwBkD,EAAxB,CAA2B1D,OAAO2C,EAAEC,KAAK5C,SAAU0D,KACxFxE,QAAQC,IAAI,cAAesE,GAC3B9B,EAAW8B,GACXpB,EAAgB,WAAD,OAAYc,EAAarD,KAAzB,gCACfyC,EAAa,UACboB,YAAW,WAAOtB,EAAgB,QAAQ,QAE3CuB,OAAM,SAAAC,GACLxB,EAAgB,WAAD,OAAYc,EAAarD,KAAzB,sCACfyC,EAAa,SACboB,YAAW,WAAOtB,EAAgB,QAAQ,SAI5CI,EACGzB,OAAOmC,GACPT,MAAK,SAAAC,GACJzD,QAAQC,IAAI,QAAS2E,KAAKC,UAAUpB,EAAG,KAAM,IAC7ChB,EAAWD,EAAQsC,OAAOrB,EAAEC,OAC5BP,EAAgB,WAAD,OAAYc,EAAarD,KAAzB,8BACfyC,EAAa,UACboB,YAAW,WAAOtB,EAAgB,QAAQ,QAE5CR,EAAW,IACXE,EAAa,MA0DfjC,KAAM8B,EACN7B,KAnCmB,SAACiD,GACxB9D,QAAQC,IAAI,OAAQ6D,EAAMC,OAAO1D,OACjCsC,EAAWmB,EAAMC,OAAO1D,QAkCpBS,OAAQ8B,EACR7B,KAhCqB,SAAC+C,GAC1B9D,QAAQC,IAAI,SAAU6D,EAAMC,OAAO1D,OACnCwC,EAAaiB,EAAMC,OAAO1D,UAgCxB,uCACA,kBAAC,EAAD,CACEmB,IAAKmC,EAAetC,UA5DJ,SAACyC,GACjB9D,QAAQC,IAAI,YAAa6D,EAAMC,OAAO1D,OACtC,IAAM0E,EAAWjB,EAAMC,OAAO1D,MACxB8D,EAAQ3B,EAAQ4B,MAAK,SAAAI,GAAC,OAAIA,EAAElD,KAAOyD,KACzC/E,QAAQC,IAAI,WAAY2E,KAAKC,UAAUV,EAAO,KAAM,IAEjDE,OAAOC,QAAP,iBAAyBH,EAAMvD,QAClC2C,EACCpB,aAAa4C,GACbvB,MAAK,SAAAC,GACJzD,QAAQC,IAAI,wBAAyB2E,KAAKC,UAAUpB,EAAG,KAAM,IAC7D,IAAMc,EAAc/B,EAAQlC,QAAO,SAAAY,GAAC,OAAIA,EAAEI,KAAOyD,KACjDtC,EAAW8B,GACXpB,EAAgB,WAAD,OAAYgB,EAAMvD,KAAlB,8BACfyC,EAAa,SACboB,YAAW,WAAOtB,EAAgB,QAAQ,aCrFhC6B,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACL3E,QAAQ2E,MAAMA,EAAM7E,c","file":"static/js/main.dacdea43.chunk.js","sourcesContent":["import React from 'react'\n\nconst Notification = ({ message, type}) => {\n    console.log('m', message)\n    console.log('type', type)\n    if (message === null) {\n      return null\n    }\n  \n    const className = `message ${type}`\n    return (\n      <div className={className}>{message}</div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Filter = (props) => {\n    return (\n        <div>Filter shown with <input value={props.filter} onChange={props.handle}></input></div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = (props) => {\n    return (\n        <form onSubmit={props.submit}>\n        <div>name: <input value={props.name} onChange={props.hNaC}/></div>\n        <div>number: <input value={props.number} onChange={props.hNuC}/></div>\n\n        <div><button type=\"submit\">add</button></div>\n      </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Person = (props) => {\n    return (\n        <div>\n            <p key={props.i}>{props.person.name} - {props.person.number} \n                <button onClick={props.delPerson} value={props.person.id}>delete</button>\n            </p>\n        </div>\n    )\n}\n\nexport default Person","import React from 'react'\nimport Person from './Person'\n\nconst Persons = (props) => {\n    return (\n        <div>\n        {props.pTS.map((person, i) => {\n            return (\n                <Person \n                    person={person}\n                    key={i}\n                    delPerson={props.delPerson} />\n            )\n\n        }\n        )}\n      </div>\n    )\n}\n\nexport default Persons","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst deletePerson = async (id) => {\n    try {\n        return axios.delete(`${baseUrl}/${id}`)\n    }\n    catch (error) {\n        console.log('error', error)\n    }\n}\n\nexport default { getAll, create, update, deletePerson }\n","import React, { useState, useEffect } from 'react'\nimport Notification from './components/Notification'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport personService from  './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ showAll, setShowAll ] = useState(true)\n  const [ errorMessage, setErrorMessage ] = useState(null)\n  const [ typeError, setTypeError ] = useState('error')\n\n  // const hook = () => {\n  //   console.log('effect start')\n  //   axios\n  //     .get('http://localhost:3001/persons')\n  //     .then(r => {\n  //       console.log('promise fulfilled or resolved')\n  //       setPersons(r.data)\n  //     })\n  // }\n  // useEffect(hook , [])\n  \n  const hook = () => {\n  //useEffect(() => {\n    personService\n      .getAll()\n      .then(r => {\n        setPersons(r.data)\n      })\n  }\n  useEffect(hook , [])\n  \n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber,\n      id: persons[persons.length - 1].id + 1,\n    }\n\n    const found = persons.find(person => person.name === newName)\n    console.log('found',found)\n    if(found) {\n      if(window.confirm(`${found.name} is already added to phonebook, remplace the old number ${found.number} with the new one ${personObject.number}?`))\n      personService\n        .update(found.id, personObject)\n        .then(r => {\n          console.log('r',r.data)\n          const listPersons = persons.map(p => p.id === found.id ? {...p, number:r.data.number} : p)\n          console.log('listPersons', listPersons)\n          setPersons(listPersons)\n          setErrorMessage(`Person '${personObject.name}' was updated in the server`)\n          setTypeError(\"update\")\n          setTimeout(() => {setErrorMessage(null)}, 3000)\n        })\n        .catch(error => {\n          setErrorMessage(`Person '${personObject.name}' was already removed from server`)\n          setTypeError(\"error\")\n          setTimeout(() => {setErrorMessage(null)}, 3000)\n\n        })\n    }else{\n        personService\n          .create(personObject)\n          .then(r => {\n            console.log('rPost', JSON.stringify(r, null, 4))\n            setPersons(persons.concat(r.data))\n            setErrorMessage(`Person '${personObject.name}' save it into the server`)\n            setTypeError(\"create\")\n            setTimeout(() => {setErrorMessage(null)}, 3000)\n          })\n          setNewName('')\n          setNewNumber('')\n        }\n        \n      }\n      \n      const delPerson = (event) => {\n        console.log('delPerson', event.target.value)\n        const personId = event.target.value\n        const found = persons.find(p => p.id === personId)\n        console.log('found in', JSON.stringify(found, null, 4))\n        \n        if(window.confirm(`Detele ${found.name}`) )\n        personService\n        .deletePerson(personId)\n        .then(r => {\n          console.log('delPerson result then', JSON.stringify(r, null, 4))\n          const listPersons = persons.filter(i => i.id !== personId)\n          setPersons(listPersons)\n          setErrorMessage(`Person '${found.name}' was removed from server`)\n          setTypeError(\"error\")\n          setTimeout(() => {setErrorMessage(null)}, 3000)\n        })\n  }\n\n  const handleNameChange = (event) => {\n    console.log('name', event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log('number', event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log('filter', event.target.value)\n    setNewFilter(event.target.value)\n    if(event.target.value === '') {\n      setShowAll(true)\n    } else {\n      setShowAll(false);\n    }\n  }\n\n  const personsToShow = showAll\n    ? persons\n    : persons.filter(person => person.name.toLowerCase().indexOf(newFilter.toLowerCase()) !== -1)\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} type={typeError}/>\n\n      <Filter filter={newFilter} handle={handleFilterChange} />\n      \n      <h2>Add a new Person</h2>\n      <PersonForm \n        submit={addPerson} \n        name={newName} \n        hNaC={handleNameChange}\n        number={newNumber}\n        hNuC={handleNumberChange} />\n\n      <h2>Numbers</h2>\n      <Persons\n        pTS={personsToShow} delPerson={delPerson} />\n\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}